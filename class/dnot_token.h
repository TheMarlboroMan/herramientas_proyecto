#ifndef TOOLS_DNOT_TOKEN_H
#define TOOLS_DNOT_TOKEN_H

#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <stdexcept>

namespace tools
{

class dnot_parser;


//!Serialization structure to put a dnot structure into a string.
struct dnot_token_serialize_options {
	bool 		tab_depth;	//!< Indent depth with tabs.
	std::string	tab_str;	//!< String to use as tab (tab, space...).

	//!Default constructor.
			dnot_token_serialize_options()	
		:tab_depth(false), tab_str("\t") {
	}
};

//!A token for the dnot parser. Somewhat compatible with json notation, even
//!if the parser does not allow for a single root node.

//!Tokens are generated by the parser and consumed by the client code. A token
//!will represent any of the following values: strings, booleans, floats, 
//!doubles, vectors or maps. Even if the internal representation allows for the
//!simultaneous existance of all types (not very efficient, actually), each 
//!token is considered to hold a value of a certain type, throwing when trying
//!to access other types. Two types are considered: values and non-values, which
//!is the same to say "scalar" and "non_scalar" (in fact, is_scalar() is an
//!alias of is_value()). All values are assigned through the "set" method,
//!irrespective of their type.

class dnot_token {

	public:

	//!Serializes the token into a string.
	std::string				serialize(const dnot_token_serialize_options& = dnot_token_serialize_options(), int=0) const;

	typedef 				std::map<std::string, dnot_token> t_map;	//!< Defines a map, which is always a string mapped to another token.
	typedef					std::vector<dnot_token> t_vector;		//!< Defines a vector of tokens.

	//!Indicates whether the token contains a scalar (int, bool, double, float or string) value.
	bool 					is_value() const;

	//!Alias of "is_value".
	bool					is_scalar() const {return is_value();}

	//!Indicates whether the token is of string type.
	bool 					is_string_value() const {return type==types::tstring;}

	//!Indicates whether the token is of int type.
	bool 					is_int_value() const {return type==types::tint;}

	//!Indicates whether the token is of float type.
	bool 					is_float_value() const {return type==types::tfloat;}

	//!Indicates whether the token is of double type.
	bool 					is_double_value() const {return type==types::tdouble;}

	//!Indicates whether the token is of bool type.
	bool 					is_bool_value() const {return type==types::tbool;}

	//!Indicates whether the token is an associative map of strings to tokens..
	bool 					is_map() const {return type==types::tmap;}

	//!Indicates whether the token is a vector of tokens.
	bool 					is_vector() const {return type==types::tvector;}

	//TODO: Add operator=.
	//!Copies the value of a token to the current one.
	void					set(const dnot_token&);

	//!Sets the token as a string, with the string value.
	void 					set(const std::string&);

	//!Sets the token as a string, with the string value.
	void 					set(const char *);

	//!Sets the token as an int, with the int value.
	void		 			set(int);

	//!Sets the token as a float, with the float value.
	void 					set(float);

	//!Sets the token as a double, with the double value.
	void 					set(double);

	//!Sets the token as a boolean, with the boolean value.
	void 					set(bool);

	//!Sets the token as an associative map with the given value.
	void 					set(const t_map& t);

	//!Sets the token as a vector of tokens with the given value..
	void 					set(const t_vector& t);

	//!Gets the map value. Will throw if the type does not match.
	const t_map& 				get_map() const;

	//!Gets the map value. Will throw if the type does not match.
	t_map&					get_map();

	//!Gets the vector value. Will throw if the type does not match.
	const t_vector& 			get_vector() const;

	//!Gets the vector value. Will throw if the type does not match.
	t_vector& 				get_vector();

	//!Gets the string value. Will throw if the type does not match.
	const std::string& 			get_string() const;

	//!Gets the int value. Will throw if the type does not match.
	int 					get_int() const;

	//!Gets the float value. Will throw if the type does not match.
	float 					get_float() const;

	//!Gets the double value. Will throw if the type does not match.
	double 					get_double() const;

	//!Gets the bool value. Will throw if the type does not match.
	bool 					get_bool() const;

	//!Checks if the key exists in a map value. Will throw if the type is not map.
	bool 					key_exists(const std::string&) const;

	//!Returns the token in the associative map that matches the key. Will 
	//!throw if the type is not a map of the key does not exist.
	const dnot_token&			operator[](const std::string&) const;

	//!Returns the token in the associative map that matches the key. Will 
	//!throw if the type is not a map of the key does not exist.
	dnot_token&				operator[](const std::string&);

	//!Returns the token in the associative map that matches the key. Will 
	//!throw if the type is not a map of the key does not exist.
	const dnot_token&			operator[](const char *) const;

	//!Returns the token in the associative map that matches the key. Will 
	//!throw if the type is not a map of the key does not exist.
	dnot_token&				operator[](const char *);

	//!Returns the token in the vector matching the index. Will throw
	//!if the type is not a vector or the index is invalid.
	const dnot_token&			operator[](size_t) const;

	//!Returns the token in the vector matching the index. Will throw
	//!if the type is not a vector or the index is invalid.
	dnot_token&				operator[](size_t);

	//!Returns the token in the vector matching the index. Will throw
	//!if the type is not a vector or the index is invalid.
	const dnot_token&			operator[](int) const;

	//!Returns the token in the vector matching the index. Will throw
	//!if the type is not a vector or the index is invalid.
	dnot_token&				operator[](int);

	//TODO...
/*
	bool 					operator==(const std::string&) const;
	bool 					operator==(const char *) const;
	bool 					operator==(int) const;
	bool 					operator==(float) const;
	bool 					operator==(bool) const;
	bool 					operator!=(const std::string&) const;
	bool 					operator!=(const char *) const;
	bool 					operator!=(int) const;
	bool 					operator!=(float) const;
	bool 					operator!=(bool) const;
*/

//	operator				t_map& () const {return tokens;}
//	operator				t_vector& () const {return vector;}

	//!string operator. Alias of get_string, will throw under the same circumstances.
	operator 				std::string() const {return get_string();}

	//!int operator. Alias of get_int, will throw under the same circumstances.
	operator				int() const {return get_int();}

	//!bool operator. Alias of get_bool, will throw under the same circumstances.
	operator				bool() const {return get_bool();}

	//!float operator. Alias of get_float, will throw under the same circumstances.
	operator				float() const {return get_float();}

	//!double operator. Alias of get_double, will throw under the same circumstances.
	operator				double() const {return get_double();}

	//!default constructor, of type string.
						dnot_token();

	//!explicit string constructor, for a string token.
	explicit				dnot_token(const std::string& v);

	//!explicit string constructor, for a string token.
	explicit 				dnot_token(const char *);

	//!explicit string constructor, for a string token.
	explicit 				dnot_token(const char);

	//!explicit int constructor, for a int token.
	explicit 				dnot_token(int v);

	//!explicit float constructor, for a float token.
	explicit 				dnot_token(float v);

	//!explicit double constructor, for a double token.
	explicit 				dnot_token(double v);

	//!explicit bool constructor, for a bool token.
	explicit 				dnot_token(bool v);

	//!explicit associative map constructor, for a map token.
	explicit 				dnot_token(const t_map& v);

	//!explicit vector constructor, for a vector token.
	explicit 				dnot_token(const t_vector& v);

	private:

	//!Different token types.
	enum class types {
		tmap, 		//!<Token is an associative map.
		tstring,	//!<Token is a string.
		tint,		//!<Token is a int.
		tfloat,		//!<Token is a float.
		tdouble,	//!<Token is a double.
		tbool,		//!<Token is a boolean.
		tvector};	//!<Token is a vector.

	//!Returns a string containing a readable name of the type.
	std::string				translate_type(types)const;

	//!Returns a string representation of the token matching what the dnot input would be.
	std::string				to_string()const;

	types					type;		//!< Contains the token type.
	t_map					tokens;		//!< Internal data of the map.
	t_vector				vector;		//!< Internal data of the vector.
	std::string				string_value;	//!< Internal data of the string.
	int					int_value;	//!< Internal data of the int.
	float					float_value;	//!< Internal data of the float.
	double					double_value;	//!< Internal data of the double.
	bool					bool_value;	//!< Internal data of the bool.

	friend class dnot_parser;
	friend std::ostream& operator<<(std::ostream& os, const tools::dnot_token& t);
};

//!Ostream operator, so a token can be passed to a stream and printed.
std::ostream& operator<<(std::ostream& os, const tools::dnot_token& t);

}

#endif
